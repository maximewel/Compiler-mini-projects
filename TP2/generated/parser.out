Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> statement ; program
Rule 3     statement -> assignement
Rule 4     statement -> expression
Rule 5     assignement -> IDENTIFIER = expression
Rule 6     expression -> NUMBER
Rule 7     expression -> IDENTIFIER
Rule 8     expression -> ( expression )
Rule 9     expression -> expression ADD_OP expression
Rule 10    expression -> expression MUL_OP expression
Rule 11    expression -> ADD_OP expression

Terminals, with rules where they appear

(                    : 8
)                    : 8
;                    : 2
=                    : 5
ADD_OP               : 9 11
IDENTIFIER           : 5 7
MUL_OP               : 10
NUMBER               : 6
error                : 

Nonterminals, with rules where they appear

assignement          : 3
expression           : 4 5 8 9 9 10 10 11
program              : 2 0
statement            : 1 2

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . statement ; program
    (3) statement -> . assignement
    (4) statement -> . expression
    (5) assignement -> . IDENTIFIER = expression
    (6) expression -> . NUMBER
    (7) expression -> . IDENTIFIER
    (8) expression -> . ( expression )
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . ADD_OP expression

    IDENTIFIER      shift and go to state 5
    NUMBER          shift and go to state 6
    (               shift and go to state 7
    ADD_OP          shift and go to state 8

    program                        shift and go to state 1
    statement                      shift and go to state 2
    assignement                    shift and go to state 3
    expression                     shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> statement .
    (2) program -> statement . ; program

    $end            reduce using rule 1 (program -> statement .)
    ;               shift and go to state 9


state 3

    (3) statement -> assignement .

    ;               reduce using rule 3 (statement -> assignement .)
    $end            reduce using rule 3 (statement -> assignement .)


state 4

    (4) statement -> expression .
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression

    ;               reduce using rule 4 (statement -> expression .)
    $end            reduce using rule 4 (statement -> expression .)
    ADD_OP          shift and go to state 10
    MUL_OP          shift and go to state 11


state 5

    (5) assignement -> IDENTIFIER . = expression
    (7) expression -> IDENTIFIER .

    =               shift and go to state 12
    ADD_OP          reduce using rule 7 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 7 (expression -> IDENTIFIER .)
    ;               reduce using rule 7 (expression -> IDENTIFIER .)
    $end            reduce using rule 7 (expression -> IDENTIFIER .)


state 6

    (6) expression -> NUMBER .

    ADD_OP          reduce using rule 6 (expression -> NUMBER .)
    MUL_OP          reduce using rule 6 (expression -> NUMBER .)
    ;               reduce using rule 6 (expression -> NUMBER .)
    $end            reduce using rule 6 (expression -> NUMBER .)
    )               reduce using rule 6 (expression -> NUMBER .)


state 7

    (8) expression -> ( . expression )
    (6) expression -> . NUMBER
    (7) expression -> . IDENTIFIER
    (8) expression -> . ( expression )
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . ADD_OP expression

    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 7
    ADD_OP          shift and go to state 8

    expression                     shift and go to state 13

state 8

    (11) expression -> ADD_OP . expression
    (6) expression -> . NUMBER
    (7) expression -> . IDENTIFIER
    (8) expression -> . ( expression )
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . ADD_OP expression

    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 7
    ADD_OP          shift and go to state 8

    expression                     shift and go to state 15

state 9

    (2) program -> statement ; . program
    (1) program -> . statement
    (2) program -> . statement ; program
    (3) statement -> . assignement
    (4) statement -> . expression
    (5) assignement -> . IDENTIFIER = expression
    (6) expression -> . NUMBER
    (7) expression -> . IDENTIFIER
    (8) expression -> . ( expression )
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . ADD_OP expression

    IDENTIFIER      shift and go to state 5
    NUMBER          shift and go to state 6
    (               shift and go to state 7
    ADD_OP          shift and go to state 8

    statement                      shift and go to state 2
    program                        shift and go to state 16
    assignement                    shift and go to state 3
    expression                     shift and go to state 4

state 10

    (9) expression -> expression ADD_OP . expression
    (6) expression -> . NUMBER
    (7) expression -> . IDENTIFIER
    (8) expression -> . ( expression )
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . ADD_OP expression

    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 7
    ADD_OP          shift and go to state 8

    expression                     shift and go to state 17

state 11

    (10) expression -> expression MUL_OP . expression
    (6) expression -> . NUMBER
    (7) expression -> . IDENTIFIER
    (8) expression -> . ( expression )
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . ADD_OP expression

    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 7
    ADD_OP          shift and go to state 8

    expression                     shift and go to state 18

state 12

    (5) assignement -> IDENTIFIER = . expression
    (6) expression -> . NUMBER
    (7) expression -> . IDENTIFIER
    (8) expression -> . ( expression )
    (9) expression -> . expression ADD_OP expression
    (10) expression -> . expression MUL_OP expression
    (11) expression -> . ADD_OP expression

    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 14
    (               shift and go to state 7
    ADD_OP          shift and go to state 8

    expression                     shift and go to state 19

state 13

    (8) expression -> ( expression . )
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression

    )               shift and go to state 20
    ADD_OP          shift and go to state 10
    MUL_OP          shift and go to state 11


state 14

    (7) expression -> IDENTIFIER .

    )               reduce using rule 7 (expression -> IDENTIFIER .)
    ADD_OP          reduce using rule 7 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 7 (expression -> IDENTIFIER .)
    ;               reduce using rule 7 (expression -> IDENTIFIER .)
    $end            reduce using rule 7 (expression -> IDENTIFIER .)


state 15

    (11) expression -> ADD_OP expression .
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 11 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 11 (expression -> ADD_OP expression .)
    ;               reduce using rule 11 (expression -> ADD_OP expression .)
    $end            reduce using rule 11 (expression -> ADD_OP expression .)
    )               reduce using rule 11 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 10 ]
  ! MUL_OP          [ shift and go to state 11 ]


state 16

    (2) program -> statement ; program .

    $end            reduce using rule 2 (program -> statement ; program .)


state 17

    (9) expression -> expression ADD_OP expression .
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 9 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 9 (expression -> expression ADD_OP expression .)
    $end            reduce using rule 9 (expression -> expression ADD_OP expression .)
    )               reduce using rule 9 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 11

  ! MUL_OP          [ reduce using rule 9 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 10 ]


state 18

    (10) expression -> expression MUL_OP expression .
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression

    ADD_OP          reduce using rule 10 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 10 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 10 (expression -> expression MUL_OP expression .)
    $end            reduce using rule 10 (expression -> expression MUL_OP expression .)
    )               reduce using rule 10 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 10 ]
  ! MUL_OP          [ shift and go to state 11 ]


state 19

    (5) assignement -> IDENTIFIER = expression .
    (9) expression -> expression . ADD_OP expression
    (10) expression -> expression . MUL_OP expression

    ;               reduce using rule 5 (assignement -> IDENTIFIER = expression .)
    $end            reduce using rule 5 (assignement -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 10
    MUL_OP          shift and go to state 11


state 20

    (8) expression -> ( expression ) .

    ADD_OP          reduce using rule 8 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 8 (expression -> ( expression ) .)
    ;               reduce using rule 8 (expression -> ( expression ) .)
    $end            reduce using rule 8 (expression -> ( expression ) .)
    )               reduce using rule 8 (expression -> ( expression ) .)

